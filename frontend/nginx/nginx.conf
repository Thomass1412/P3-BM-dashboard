events {}

http {
    # Add support for mimetypes with static content (i.e. css, js)
    include mime.types;

    # Websocket support
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    map $http_x_forwarded_proto $forwarded_protocol {
        default $scheme;

        # Only allow the values 'http' and 'https' for the X-Forwarded-Proto header.
        http http;
        https https;
    }

    # Create NGINX server on port 80
    server {
        listen 80;
        server_name  _; # Default http://nginx.org/en/docs/http/server_names.html
        
        # Set DNS resolver to docker (Docker DNS -> "backend")
        resolver 127.0.0.11 valid=30s;

        # Frontend -> Static compiled files
        location / {
            # Compression
            gzip on;
            gzip_comp_level 2;
            gzip_min_length 1000;
            gzip_proxied any;
            gzip_vary on;
            gunzip on;

            # text/html is included by default
            gzip_types
                application/javascript
                application/json
                font/ttf
                image/svg+xml
                text/css;

            # Location of static content
            root /usr/share/nginx/html/;
            index index.html index.html;
            try_files $uri $uri/ /index.html;
        }

        # Match /api/v1 OR /auth with Regular Expression
        location ~ ^/(api/v1|auth)/* {
            # CORS headers
            ## CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' * always;
                add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' * always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;

            # Proxy headers
            proxy_redirect off;
            proxy_set_header host $http_host;
            proxy_set_header X-real-ip $remote_addr;
            proxy_set_header X-forwarded-host $http_host;
            proxy_set_header X-forwarded-for $proxy_add_x_forwarded_for;
            proxy_set_header X-forwarded-proto $forwarded_protocol;

            # Proxying
            set $upstream_backend backend:8080;
            proxy_pass http://$upstream_backend; # Use upstream
        }
    }
}